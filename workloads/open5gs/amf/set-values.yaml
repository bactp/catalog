apiVersion: fn.kpt.dev/v1alpha1
kind: StarlarkRun
metadata: # kpt-merge: /generate-values
  name: generate-values
  annotations:
    config.kubernetes.io/local-config: "true"
    argocd.argoproj.io/sync-options: SkipDryRunOnMissingResource=true
    internal.kpt.dev/upstream-identifier: fn.kpt.dev|StarlarkRun|default|generate-values
source: "load(\"krmfn.star\", \"krmfn\")\nload('encoding/json.star', 'json')\n\ndef set_values(ctx, resources):\n   clusterName = \"\"\n\n   # Step 1: Get the cluster name from the config map\n   for r in resources:\n       if krmfn.match_gvk(r, \"ref.nephio.org/v1alpha1\", \"Config\") and krmfn.match_name(r, \"config\"):\n         # clusterName = r[\"data\"][\"name\"]\n\n         # instanceName = \"amf-\" + clusterName\n\n         interfaces = r[\"spec\"][\"interfaces\"]\n\n         for r in resources:\n           if krmfn.match_gvk(r, \"apps/v1\", \"Deployment\"):\n             \n             for x in r[\"spec\"][\"template\"][\"spec\"][\"volumes\"]:\n              if x[\"name\"] == \"amf-volume\":\n                for v in x[\"projected\"][\"sources\"]:\n                  if \"example\" in v[\"configMap\"][\"name\"]:\n                    v[\"configMap\"][\"name\"]=r[\"metadata\"][\"name\"]\n\n\n             for y in interfaces:\n              name = y[\"name\"]\n              interface = y[\"interface\"]\n              ip = y[\"ipv4\"][\"address\"]\n\n              keyAnnotations = \"annotations\"\n              keyMultus = \"k8s.v1.cni.cncf.io/networks\"\n\n\n              if keyAnnotations in r[\"spec\"][\"template\"][\"metadata\"][\"labels\"]:\n                # print(\"we have annotations already, perhaps append\")\n                if keyMultus in r[\"spec\"][\"template\"][\"metadata\"][\"labels\"][\"annotations\"]:\n\n                  # print(r[\"spec\"][\"template\"][\"metadata\"][\"labels\"][\"annotations\"][\"k8s.v1.cni.cncf.io/networks\"])\n                  addedInterfacesStr = r[\"spec\"][\"template\"][\"metadata\"][\"labels\"][\"annotations\"][\"k8s.v1.cni.cncf.io/networks\"]\n                  addedInterfaces = json.decode(addedInterfacesStr)  # decode string to list/dict\n\n                  new_net = {\n                      \"name\": name,\n                      \"interface\": interface,\n                      \"ips\": [ip]\n                  }\n                  exists =False\n                  for net in addedInterfaces:\n                   if net[\"interface\"] == interface and net[\"name\"] == name:\n                     exists = True\n                     break\n\n                  if not exists:\n                    addedInterfaces.append(new_net)\n                    r[\"spec\"][\"template\"][\"metadata\"][\"labels\"][\"annotations\"][\"k8s.v1.cni.cncf.io/networks\"] = json.encode(addedInterfaces)\n\n                else:\n                  r[\"spec\"][\"template\"][\"metadata\"][\"labels\"][\"annotations\"] = {\n                      \"k8s.v1.cni.cncf.io/networks\": '[{ \"name\": \"%s\", \"interface\": \"%s\", \"ips\": [ \"%s\" ] }]' % (name, interface, ip)\n                  }\n              else:\n                r[\"spec\"][\"template\"][\"metadata\"][\"labels\"][\"annotations\"] = {\n                    \"k8s.v1.cni.cncf.io/networks\": '[{ \"name\": \"%s\", \"interface\": \"%s\", \"ips\": [ \"%s\" ] }]' % (name, interface, ip)\n                }\n\nset_values(ctx, ctx.resource_list[\"items\"])"
